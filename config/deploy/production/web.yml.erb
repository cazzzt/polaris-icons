apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: web
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: 'false'
    ingress.kubernetes.io/configuration-snippet: |
      if ($host != 'polaris-icons.shopify.com') {
        return 301 https://polaris-icons.shopify.com$request_uri;
      }
    ingress.shopify.io/tls-secretbuddy: 'false'
  labels:
    name: web
    app: 'polaris-icons'
    env: 'production'
spec:
  tls:
    - hosts:
        - 'polaris-icons.shopifycloud.com'
        - 'polaris-icons.shopify.com'
      secretName: polaris-icons-shopifycloud-com
  rules:
    - host: 'polaris-icons.shopifycloud.com'
      http:
        paths:
          - backend:
              serviceName: web
              servicePort: 80
    - host: 'polaris-icons.shopify.com'
      http:
        paths:
          - backend:
              serviceName: web
              servicePort: 80
---
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: polaris-icons-shopifycloud-com
  labels:
    app: polaris-icons
  env: production
spec:
  secretName: polaris-icons-shopifycloud-com
  issuerRef:
    name: letsencrypt-issuer
    kind: ClusterIssuer
  dnsNames:
    - polaris-icons.shopifycloud.com
  acme:
    config:
      - http01:
          ingressClass: nginx
        domains:
          - polaris-icons.shopifycloud.com
---
apiVersion: v1
kind: Service
metadata:
  name: web
  labels:
    name: web
    app: 'polaris-icons'
    env: 'production'
spec:
  ports:
    - port: 80
      name: http
      targetPort: 9000
  selector:
    name: web
    app: 'polaris-icons'
    env: 'production'
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: web
  annotations:
    shipit.shopify.io/restart: 'true'
  labels:
    name: web
    app: 'polaris-icons'
    env: 'production'
spec:
  progressDeadlineSeconds: 120
  replicas: 3
  selector:
    matchLabels:
      name: web
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        name: web
        app: 'polaris-icons'
        env: 'production'
    spec:
      automountServiceAccountToken: true
      containers:
        - name: web
          image: gcr.io/shopify-docker-images/apps/production/polaris-icons:<%= current_sha %>
          args:
            - web
          ports:
            - containerPort: 9000
              name: http-alt
          readinessProbe:
            httpGet:
              path: '/ping/'
              port: 9000
            initialDelaySeconds: 20
            timeoutSeconds: 3
          env:
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /var/run/gcloud/key
            - name: ENV
              value: 'production'
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: TRACE_PROXY_ADDR
              value: http://$(NODE_IP):8096/
            - name: STATSD_ADDR
              value: $(NODE_IP):8125
            - name: STATSD_IMPLEMENTATION
              value: datadog
            - name: PORT
              value: '9000'
            - name: IDENTITY_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: identity-config
                  key: clientId
                  optional: true
            - name: IDENTITY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: identity-config
                  key: clientSecret
                  optional: true
            - name: KAFKA_CLIENT_CERT
              value: '/ssl/kafka-client/tls.crt'
            - name: KAFKA_CLIENT_KEY
              value: '/ssl/kafka-client/tls.key'
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1Gi
          volumeMounts:
            - name: ejson-keys
              mountPath: '/key'
              readOnly: true
            - mountPath: '/ssl/kafka-client'
              name: kafka-client
              readOnly: true
            - name: google-service-account
              mountPath: '/var/run/gcloud'
              readOnly: true
      volumes:
        - name: kafka-client
          secret:
            secretName: kafka-client
        - name: ejson-keys
          secret:
            secretName: ejson-keys
        - name: google-service-account
          secret:
            secretName: service-account-key
